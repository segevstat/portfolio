# Fraud Detection Machine Learning Project

## Project Overview

This project implements a machine learning pipeline to detect fraudulent credit card transactions using a real-world dataset. It aims to build, compare, and evaluate various models to accurately classify transactions as fraudulent or legitimate.

The project focuses on:

* Data preprocessing and feature engineering for anonymized PCA-transformed data.
* Handling class imbalance typical in fraud detection datasets.
* Building baseline and ensemble models for fraud detection.
* Comprehensive model evaluation using metrics like ROC AUC and Precision-Recall curves.

**The final trained model outputs whether a given transaction is fraudulent or not (binary classification), optionally providing a fraud probability score. This enables automated detection and alerting of suspicious transactions for further review or blocking.**

## Dataset

The primary dataset used is the **Credit Card Fraud Detection** dataset originally from Kaggle, publicly available via TensorFlow:

* Contains 284,807 transactions over two days in Europe.
* Each transaction is represented by 30 features:

  * `V1`â€“`V28`: anonymized PCA components.
  * `Time`: seconds elapsed since first transaction.
  * `Amount`: transaction amount.
  * `Class`: target variable (0 = legitimate, 1 = fraud).
* The dataset is highly imbalanced, with only \~0.17% fraud cases.

## Model Choice Explanation

Two baseline models were chosen for this project due to their complementary strengths and suitability for fraud detection tasks:

* **Logistic Regression**

  * *Advantages:*

    * Simple and interpretable linear model, easy to understand and explain.
    * Fast to train, useful for baseline comparisons.
    * Handles large feature spaces well, especially with regularization.
    * With class weighting, it can partially mitigate class imbalance.

* **Random Forest Classifier**

  * *Advantages:*

    * Ensemble of decision trees captures complex non-linear relationships in data.
    * Robust to noise and outliers, which are common in fraud data.
    * Handles imbalanced datasets well when configured with `class_weight='balanced'`.
    * Provides feature importance insights useful for further analysis.

Using both models allows us to establish a strong baseline: logistic regression for interpretability and quick iteration, random forest for capturing more complex patterns. Later, these models can be combined in an ensemble to further improve detection accuracy.

## Project Structure

```
fraud_ml_project/
â”œâ”€â”€ app/
â”‚   â””â”€â”€ app.py                     # ðŸ”¥ Streamlit app for predictions
â”œâ”€â”€ data/
â”‚   â””â”€â”€ raw_data/                  # Raw and downloaded datasets
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ baseline_models.py         # Baseline classifiers (Logistic Regression, Random Forest)
â”‚   â”œâ”€â”€ ensemble_fraud_detector.py # Ensemble model implementations
â”‚   â”œâ”€â”€ feature_engineering.py     # Data preprocessing and feature engineering
â”‚   â”œâ”€â”€ data_utils.py              # Utilities for data loading and train-test splitting
â”‚   â””â”€â”€ __init__.py                # Package initializer
â”œâ”€â”€ notebooks/
â”‚   â””â”€â”€ 01_model_comparison.ipynb  # Exploratory analysis and model comparison
â”œâ”€â”€ outputs/
â”‚   â”œâ”€â”€ figures/                   # Model performance visualizations
â”‚   â””â”€â”€ models/                    # Saved trained models (pickle/joblib)
â”œâ”€â”€ utils/
â”‚   â””â”€â”€ evaluation.py              # Evaluation metrics and plotting functions
â”œâ”€â”€ requirements.txt               # Required Python packages
â”œâ”€â”€ README.md                      # Project overview and instructions
â””â”€â”€ main.py                        # ðŸŽ¬ Script to run the full fraud detection pipeline



